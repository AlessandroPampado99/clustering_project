[INPUT]
# Definire il path da cui prendere il file di input. Se Ã¨ nella stessa cartella, lasciare vuoto
path = C:\Users\aless\Desktop\PhD_Pisa\2024_01_08\clustering_project\input

# Definire il nome del file csv da leggere
# nome_csv = iris.csv
nome_csv = 

# In alternative, definire il nome del file excel da leggere  
# nome_excel = 
# nome_excel = Energy_demand.xlsx
nome_excel = Input_timeseries_training_dataset.xlsx
# nome_excel = Clustering_data.xlsx

# Nome foglio. Se non presente, lasciare vuoto
# nome_sheet =
# nome_sheet = NY_ResidentialLow
nome_sheet = Data

# Indicare il nome delle colonne in una list, anche se indicate già nel file sorgente
# nome_colonne = ["petal_length","petal_width","sepal_length","sepal_width","class"]
# nome_colonne = ["Ora", "vecchio 1", "vecchio 2", "T", "Electricity", "Heat"]
nome_colonne = ["Date", "Month", "Day", "Year", "Gtot", "Tair", "Electricity_purchasing_price", "Electricity_selling_price", "Natural_gas_price", "Electrical_demand", "Thermal_demand"]
# nome_colonne = ["Date", "Month", "Day", "Year", "Gtot", "Tair", "Electricity_price", "Electricity_selling_price", "Electrical_demand", "Thermal_demand"]


# Definire tra parentesi quadra le colonne da eliminare dal file, altrimenti lasciare vuoto. I nomi vanno tra virgolette
# nome_colonne_da_eliminare = ["class"]
# nome_colonne_da_eliminare = ["Ora", "vecchio 1", "vecchio 2", "T"]
nome_colonne_da_eliminare = ["Date", "Month", "Day", "Year", "Electricity_purchasing_price", "Natural_gas_price"]

# Definire colonne che non sono attributi di clustering ma che verranno utilizzate in seguito
    # Queste colonne devono essere indicate anche in nome_colonne_da_eliminare
    # Nota come con il kmeans questo non abbia senso, perché il centroide non può essere associato a qualcos'altro
nome_colonne_non_attributi = ["Electricity_purchasing_price", "Natural_gas_price"]

[CLUSTERING]
# Definire l'algoritmo di clustering da utilizzare (tra parentesi quadra, anche entrambi vanno bene):
    # kmeans -> algoritmo originale kmeans
    # substitution -> kmeans con sostituzione del centroide con il suo elemento piÃ¹ vicino
    # kmedoids -> algoritmo originale kmedoids
algorithms = ["kmedoids"]

# Definire il numero di timesteps per ogni attributo (es. risoluzione oraria per un giorno -> 24)
timesteps = 24

# Definire il numero di attributi del processo di clustering 
attributes = 3

# Definire il numero minimo e massimo di clusters (se si vuole un solo n_cluster, ripeterlo due volte)
n_clusters = [4, 50]

# Definire il metodo per calcolare il peso di ciascun cluster:
    # cluster_frequency -> numero di elementi appartenenti ad ogni cluster
weight = cluster_frequency
n_years = 9

# Definire per quale attributo Ã¨ necessario applicare un certo tipo di extreme scenario criterion:
    # Null -> non considerato (non Ã¨ necessario indicarlo)
    # Replacing -> lo scenario estremo diventa l'elemento rappresentativo
        # Replacing_max -> aggiungo il periodo rappresentativo contenente l'elemento (singolo) massimo
        # Replacing_min -> come prima, ma il minimo.
    # Adding -> lo scenario estremo viene aggiunto come nuovo cluster, poi gli elementi vengono re-assegnati
# extreme_scenario = {"Electrical_demand": ['Adding_max'], "Thermal_demand": ['Adding_max']}
extreme_scenario = {}
# Modificalo e fallo diventare unico con una list all'interno

[OUTPUT]
# Decidere se i dati stampati hanno bisogno di una data. Mettere True o False
date = True

# Decidere se aggiungere una data fasulla con l'algoritmo kmeans
date_fake_kmeans = True

# Indicare la data di inizio dei dati di input. Se non presente, lasciare vuoto
initial_date = 01/01/2010 

# Decidere il nome del file di output
output_name = timeseries_raw.xlsx

# Decidere se si vuole plottare i profili ottenuti o meno (True o false)
plot = False

